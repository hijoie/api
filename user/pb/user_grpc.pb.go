// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserLightClient is the client API for UserLight service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserLightClient interface {
	LightPay(ctx context.Context, in *LigthPayReq, opts ...grpc.CallOption) (*LigthPayResp, error)
}

type userLightClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLightClient(cc grpc.ClientConnInterface) UserLightClient {
	return &userLightClient{cc}
}

func (c *userLightClient) LightPay(ctx context.Context, in *LigthPayReq, opts ...grpc.CallOption) (*LigthPayResp, error) {
	out := new(LigthPayResp)
	err := c.cc.Invoke(ctx, "/user.UserLight/lightPay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLightServer is the server API for UserLight service.
// All implementations must embed UnimplementedUserLightServer
// for forward compatibility
type UserLightServer interface {
	LightPay(context.Context, *LigthPayReq) (*LigthPayResp, error)
	mustEmbedUnimplementedUserLightServer()
}

// UnimplementedUserLightServer must be embedded to have forward compatible implementations.
type UnimplementedUserLightServer struct {
}

func (UnimplementedUserLightServer) LightPay(context.Context, *LigthPayReq) (*LigthPayResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LightPay not implemented")
}
func (UnimplementedUserLightServer) mustEmbedUnimplementedUserLightServer() {}

// UnsafeUserLightServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserLightServer will
// result in compilation errors.
type UnsafeUserLightServer interface {
	mustEmbedUnimplementedUserLightServer()
}

func RegisterUserLightServer(s grpc.ServiceRegistrar, srv UserLightServer) {
	s.RegisterService(&UserLight_ServiceDesc, srv)
}

func _UserLight_LightPay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LigthPayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLightServer).LightPay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserLight/lightPay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLightServer).LightPay(ctx, req.(*LigthPayReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserLight_ServiceDesc is the grpc.ServiceDesc for UserLight service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserLight_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserLight",
	HandlerType: (*UserLightServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "lightPay",
			Handler:    _UserLight_LightPay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/pb/user.proto",
}

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	CreateVerifyCode(ctx context.Context, in *CreateVerifyCodeReq, opts ...grpc.CallOption) (*CreateVerifyCodeRsp, error)
	LoginByPhone(ctx context.Context, in *LoginByPhoneReq, opts ...grpc.CallOption) (*TokenResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateVerifyCode(ctx context.Context, in *CreateVerifyCodeReq, opts ...grpc.CallOption) (*CreateVerifyCodeRsp, error) {
	out := new(CreateVerifyCodeRsp)
	err := c.cc.Invoke(ctx, "/user.User/CreateVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LoginByPhone(ctx context.Context, in *LoginByPhoneReq, opts ...grpc.CallOption) (*TokenResp, error) {
	out := new(TokenResp)
	err := c.cc.Invoke(ctx, "/user.User/LoginByPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	CreateVerifyCode(context.Context, *CreateVerifyCodeReq) (*CreateVerifyCodeRsp, error)
	LoginByPhone(context.Context, *LoginByPhoneReq) (*TokenResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) CreateVerifyCode(context.Context, *CreateVerifyCodeReq) (*CreateVerifyCodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVerifyCode not implemented")
}
func (UnimplementedUserServer) LoginByPhone(context.Context, *LoginByPhoneReq) (*TokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByPhone not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/CreateVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateVerifyCode(ctx, req.(*CreateVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LoginByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LoginByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/LoginByPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LoginByPhone(ctx, req.(*LoginByPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVerifyCode",
			Handler:    _User_CreateVerifyCode_Handler,
		},
		{
			MethodName: "LoginByPhone",
			Handler:    _User_LoginByPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/pb/user.proto",
}
